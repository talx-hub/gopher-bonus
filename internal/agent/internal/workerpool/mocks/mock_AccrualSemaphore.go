// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAccrualSemaphore creates a new instance of MockAccrualSemaphore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccrualSemaphore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccrualSemaphore {
	mock := &MockAccrualSemaphore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccrualSemaphore is an autogenerated mock type for the AccrualSemaphore type
type MockAccrualSemaphore struct {
	mock.Mock
}

type MockAccrualSemaphore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccrualSemaphore) EXPECT() *MockAccrualSemaphore_Expecter {
	return &MockAccrualSemaphore_Expecter{mock: &_m.Mock}
}

// AcquireWithTimeout provides a mock function for the type MockAccrualSemaphore
func (_mock *MockAccrualSemaphore) AcquireWithTimeout(timeout time.Duration) error {
	ret := _mock.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for AcquireWithTimeout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = returnFunc(timeout)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccrualSemaphore_AcquireWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireWithTimeout'
type MockAccrualSemaphore_AcquireWithTimeout_Call struct {
	*mock.Call
}

// AcquireWithTimeout is a helper method to define mock.On call
//   - timeout
func (_e *MockAccrualSemaphore_Expecter) AcquireWithTimeout(timeout interface{}) *MockAccrualSemaphore_AcquireWithTimeout_Call {
	return &MockAccrualSemaphore_AcquireWithTimeout_Call{Call: _e.mock.On("AcquireWithTimeout", timeout)}
}

func (_c *MockAccrualSemaphore_AcquireWithTimeout_Call) Run(run func(timeout time.Duration)) *MockAccrualSemaphore_AcquireWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockAccrualSemaphore_AcquireWithTimeout_Call) Return(err error) *MockAccrualSemaphore_AcquireWithTimeout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccrualSemaphore_AcquireWithTimeout_Call) RunAndReturn(run func(timeout time.Duration) error) *MockAccrualSemaphore_AcquireWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function for the type MockAccrualSemaphore
func (_mock *MockAccrualSemaphore) Release() {
	_mock.Called()
	return
}

// MockAccrualSemaphore_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockAccrualSemaphore_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *MockAccrualSemaphore_Expecter) Release() *MockAccrualSemaphore_Release_Call {
	return &MockAccrualSemaphore_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *MockAccrualSemaphore_Release_Call) Run(run func()) *MockAccrualSemaphore_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccrualSemaphore_Release_Call) Return() *MockAccrualSemaphore_Release_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAccrualSemaphore_Release_Call) RunAndReturn(run func()) *MockAccrualSemaphore_Release_Call {
	_c.Run(run)
	return _c
}
