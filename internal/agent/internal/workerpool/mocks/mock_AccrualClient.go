// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/talx-hub/gopher-bonus/internal/model"
)

// NewMockAccrualClient creates a new instance of MockAccrualClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccrualClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccrualClient {
	mock := &MockAccrualClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccrualClient is an autogenerated mock type for the AccrualClient type
type MockAccrualClient struct {
	mock.Mock
}

type MockAccrualClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccrualClient) EXPECT() *MockAccrualClient_Expecter {
	return &MockAccrualClient_Expecter{mock: &_m.Mock}
}

// GetOrderInfo provides a mock function for the type MockAccrualClient
func (_mock *MockAccrualClient) GetOrderInfo(ctx context.Context, orderID string) (model.DTOAccrualInfo, error) {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderInfo")
	}

	var r0 model.DTOAccrualInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (model.DTOAccrualInfo, error)); ok {
		return returnFunc(ctx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) model.DTOAccrualInfo); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		r0 = ret.Get(0).(model.DTOAccrualInfo)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccrualClient_GetOrderInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderInfo'
type MockAccrualClient_GetOrderInfo_Call struct {
	*mock.Call
}

// GetOrderInfo is a helper method to define mock.On call
//   - ctx
//   - orderID
func (_e *MockAccrualClient_Expecter) GetOrderInfo(ctx interface{}, orderID interface{}) *MockAccrualClient_GetOrderInfo_Call {
	return &MockAccrualClient_GetOrderInfo_Call{Call: _e.mock.On("GetOrderInfo", ctx, orderID)}
}

func (_c *MockAccrualClient_GetOrderInfo_Call) Run(run func(ctx context.Context, orderID string)) *MockAccrualClient_GetOrderInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccrualClient_GetOrderInfo_Call) Return(dTOAccrualInfo model.DTOAccrualInfo, err error) *MockAccrualClient_GetOrderInfo_Call {
	_c.Call.Return(dTOAccrualInfo, err)
	return _c
}

func (_c *MockAccrualClient_GetOrderInfo_Call) RunAndReturn(run func(ctx context.Context, orderID string) (model.DTOAccrualInfo, error)) *MockAccrualClient_GetOrderInfo_Call {
	_c.Call.Return(run)
	return _c
}
