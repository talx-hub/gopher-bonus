// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/talx-hub/gopher-bonus/internal/model/bonus"
)

// NewMockBonusRepository creates a new instance of MockBonusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBonusRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBonusRepository {
	mock := &MockBonusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBonusRepository is an autogenerated mock type for the BonusRepository type
type MockBonusRepository struct {
	mock.Mock
}

type MockBonusRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBonusRepository) EXPECT() *MockBonusRepository_Expecter {
	return &MockBonusRepository_Expecter{mock: &_m.Mock}
}

// CreateTransaction provides a mock function for the type MockBonusRepository
func (_mock *MockBonusRepository) CreateTransaction(ctx context.Context, t *bonus.Transaction) error {
	ret := _mock.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *bonus.Transaction) error); ok {
		r0 = returnFunc(ctx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBonusRepository_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockBonusRepository_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx
//   - t
func (_e *MockBonusRepository_Expecter) CreateTransaction(ctx interface{}, t interface{}) *MockBonusRepository_CreateTransaction_Call {
	return &MockBonusRepository_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, t)}
}

func (_c *MockBonusRepository_CreateTransaction_Call) Run(run func(ctx context.Context, t *bonus.Transaction)) *MockBonusRepository_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bonus.Transaction))
	})
	return _c
}

func (_c *MockBonusRepository_CreateTransaction_Call) Return(err error) *MockBonusRepository_CreateTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBonusRepository_CreateTransaction_Call) RunAndReturn(run func(ctx context.Context, t *bonus.Transaction) error) *MockBonusRepository_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactionsByUser provides a mock function for the type MockBonusRepository
func (_mock *MockBonusRepository) ListTransactionsByUser(ctx context.Context, userID string, tp bonus.TransactionType) ([]bonus.Transaction, error) {
	ret := _mock.Called(ctx, userID, tp)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionsByUser")
	}

	var r0 []bonus.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bonus.TransactionType) ([]bonus.Transaction, error)); ok {
		return returnFunc(ctx, userID, tp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bonus.TransactionType) []bonus.Transaction); ok {
		r0 = returnFunc(ctx, userID, tp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bonus.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bonus.TransactionType) error); ok {
		r1 = returnFunc(ctx, userID, tp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBonusRepository_ListTransactionsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactionsByUser'
type MockBonusRepository_ListTransactionsByUser_Call struct {
	*mock.Call
}

// ListTransactionsByUser is a helper method to define mock.On call
//   - ctx
//   - userID
//   - tp
func (_e *MockBonusRepository_Expecter) ListTransactionsByUser(ctx interface{}, userID interface{}, tp interface{}) *MockBonusRepository_ListTransactionsByUser_Call {
	return &MockBonusRepository_ListTransactionsByUser_Call{Call: _e.mock.On("ListTransactionsByUser", ctx, userID, tp)}
}

func (_c *MockBonusRepository_ListTransactionsByUser_Call) Run(run func(ctx context.Context, userID string, tp bonus.TransactionType)) *MockBonusRepository_ListTransactionsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bonus.TransactionType))
	})
	return _c
}

func (_c *MockBonusRepository_ListTransactionsByUser_Call) Return(transactions []bonus.Transaction, err error) *MockBonusRepository_ListTransactionsByUser_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockBonusRepository_ListTransactionsByUser_Call) RunAndReturn(run func(ctx context.Context, userID string, tp bonus.TransactionType) ([]bonus.Transaction, error)) *MockBonusRepository_ListTransactionsByUser_Call {
	_c.Call.Return(run)
	return _c
}
