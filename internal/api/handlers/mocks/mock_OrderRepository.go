// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/talx-hub/gopher-bonus/internal/model/order"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Create(context1 context.Context, order1 order.Order) error {
	ret := _mock.Called(context1, order1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, order.Order) error); ok {
		r0 = returnFunc(context1, order1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1
//   - order1
func (_e *MockOrderRepository_Expecter) Create(context1 interface{}, order1 interface{}) *MockOrderRepository_Create_Call {
	return &MockOrderRepository_Create_Call{Call: _e.mock.On("Create", context1, order1)}
}

func (_c *MockOrderRepository_Create_Call) Run(run func(context1 context.Context, order1 order.Order)) *MockOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(order.Order))
	})
	return _c
}

func (_c *MockOrderRepository_Create_Call) Return(err error) *MockOrderRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Create_Call) RunAndReturn(run func(context1 context.Context, order1 order.Order) error) *MockOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) FindByID(context1 context.Context, s string) (*order.Order, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *order.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*order.Order, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *order.Order); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockOrderRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - context1
//   - s
func (_e *MockOrderRepository_Expecter) FindByID(context1 interface{}, s interface{}) *MockOrderRepository_FindByID_Call {
	return &MockOrderRepository_FindByID_Call{Call: _e.mock.On("FindByID", context1, s)}
}

func (_c *MockOrderRepository_FindByID_Call) Run(run func(context1 context.Context, s string)) *MockOrderRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderRepository_FindByID_Call) Return(order1 *order.Order, err error) *MockOrderRepository_FindByID_Call {
	_c.Call.Return(order1, err)
	return _c
}

func (_c *MockOrderRepository_FindByID_Call) RunAndReturn(run func(context1 context.Context, s string) (*order.Order, error)) *MockOrderRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserID provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) FindByUserID(context1 context.Context, s string) (*order.Order, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *order.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*order.Order, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *order.Order); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type MockOrderRepository_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - context1
//   - s
func (_e *MockOrderRepository_Expecter) FindByUserID(context1 interface{}, s interface{}) *MockOrderRepository_FindByUserID_Call {
	return &MockOrderRepository_FindByUserID_Call{Call: _e.mock.On("FindByUserID", context1, s)}
}

func (_c *MockOrderRepository_FindByUserID_Call) Run(run func(context1 context.Context, s string)) *MockOrderRepository_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderRepository_FindByUserID_Call) Return(order1 *order.Order, err error) *MockOrderRepository_FindByUserID_Call {
	_c.Call.Return(order1, err)
	return _c
}

func (_c *MockOrderRepository_FindByUserID_Call) RunAndReturn(run func(context1 context.Context, s string) (*order.Order, error)) *MockOrderRepository_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}
