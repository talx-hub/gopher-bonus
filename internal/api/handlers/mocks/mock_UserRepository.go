// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/talx-hub/gopher-bonus/internal/model/user"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, u *user.User) error {
	ret := _mock.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = returnFunc(ctx, u)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - u
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, u interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, u)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, u *user.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(err error) *MockUserRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, u *user.User) error) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Exists(ctx context.Context, loginHash string) bool {
	ret := _mock.Called(ctx, loginHash)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, loginHash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUserRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockUserRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx
//   - loginHash
func (_e *MockUserRepository_Expecter) Exists(ctx interface{}, loginHash interface{}) *MockUserRepository_Exists_Call {
	return &MockUserRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, loginHash)}
}

func (_c *MockUserRepository_Exists_Call) Run(run func(ctx context.Context, loginHash string)) *MockUserRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_Exists_Call) Return(b bool) *MockUserRepository_Exists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUserRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, loginHash string) bool) *MockUserRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindByID(ctx context.Context, id string) (user.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockUserRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockUserRepository_FindByID_Call {
	return &MockUserRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockUserRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByID_Call) Return(user1 user.User, err error) *MockUserRepository_FindByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id string) (user.User, error)) *MockUserRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByLogin provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindByLogin(ctx context.Context, loginHash string) (user.User, error) {
	ret := _mock.Called(ctx, loginHash)

	if len(ret) == 0 {
		panic("no return value specified for FindByLogin")
	}

	var r0 user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return returnFunc(ctx, loginHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = returnFunc(ctx, loginHash)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, loginHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLogin'
type MockUserRepository_FindByLogin_Call struct {
	*mock.Call
}

// FindByLogin is a helper method to define mock.On call
//   - ctx
//   - loginHash
func (_e *MockUserRepository_Expecter) FindByLogin(ctx interface{}, loginHash interface{}) *MockUserRepository_FindByLogin_Call {
	return &MockUserRepository_FindByLogin_Call{Call: _e.mock.On("FindByLogin", ctx, loginHash)}
}

func (_c *MockUserRepository_FindByLogin_Call) Run(run func(ctx context.Context, loginHash string)) *MockUserRepository_FindByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByLogin_Call) Return(user1 user.User, err error) *MockUserRepository_FindByLogin_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_FindByLogin_Call) RunAndReturn(run func(ctx context.Context, loginHash string) (user.User, error)) *MockUserRepository_FindByLogin_Call {
	_c.Call.Return(run)
	return _c
}
